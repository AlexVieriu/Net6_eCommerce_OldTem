-> Create a the road map

-> Product.cs
-> Order.cs				:   OrderId, DatePlaced, DateProcessing, DateProcessed, CustomerName, CustomerAddress, 
                            CustomerCity, CustomerStateProvince, CustomerCountry, AdminUser, LineItems, UniqueId, 

                            AddProduct(int productId, int qty, double price), RemoveProduct(int productId)
                            
-> OrderLineItem.cs		:   LineItemId, ProductId, Price, Quantity, OrderId, Product

-> ProductRepository.cs: GetProduct(int id), GetProducts(string filter = null)
-> IProductReository.cs

-> add Assembly for CustomerProtal

-> SearchProductUseCase.cs, ISearchProductUseCase.cs

-> SearchProductsComp.razor
-> SearchBarComp.razor      : Form Bootstrap
-> ProductItemComp.razor    : Card Bootstrap

-> ViewProductUseCase.cs, IViewProductUseCase.cs
-> ViewProductComp.razor: Card + Button(Add to Cart) + Button(Back to List)


-------- Test Application --------

-> OrderService.cs		:
-> IOrderService.cs		:   bool ValidateCustomerInformation(string name, string address, string city, string province, string country);
                            bool ValidateCreateOrder(Order order);  
                                -> order has exist
                                -> order has to have order line items
                                -> validationg line items (check ProductId, Price, Quantity)                                
                                -> validate customer info
                            bool ValidateProcessOrder(Order order);
                                -> DataProcessed, AdminUser
                            bool ValidateUpdateOrder(Order order);
                                -> order has to exist
                                -> order has OrderId *
                                -> order has to have order line items
                                -> validation line items
                                -> DateProcessing has to be populate, DateProcessed don't need to be populated *
                                -> validate uniqueId *                               
                                -> validate customer info

-> IShoppingCart(43)
-> ShoppingCart (45):

   private Task<Order> GetOrder()
        -> get the Product from localStorage     
        -> add the Product
        -> set the Order to the localStorage
    
   private Task SetOrder(Order order)    

    Task<Order> AddProductAsync(Product product);
        -> get Order
        -> add product
        -> setOrder

    Task<Order> DeleteProductAsync(int productId);
        -> get Order
        -> removeProduct
        -> set Order

    Task EmptyAsync();
        -> setOrder(null)

    Task<Order> GetOrderAsync()   
    
    Task<Order> UpdateOrderAsync(Order order)
        -> setOrder

    Task<Order> UpdateQuantityAsync(int productId, int quantity); 
        -> get order
        -> check quantity<0
        -> check quantati == 0
        -> get lineItem
        -> check lineItem
        -> setOrder                  

-> IAddProductToCardUseCase.cs(44)  -> inject interface to ViewProductComp.razor 
-> AddProductToCardUseCase.cs       -> get the Product, add product to the ShoppingCart


-> TopNavBar.razor(47) (Boostrap)
-> rename ProductItemComp.razor to ProductCartComp.razor


---------- Testing  the app ----------

-> ViewShoppingCartUseCase.cs (48) : GetOrderAsync();

-> ShoppingCartComp.razor (49)      : make it all with class="row" and class="col"
    -> LineItemComp.razor (50)      : Img, Name, Quantity, Price, Btn(delete)  -  HandleQuantityChange(), DeleteProduct()
    -> OrderSummaryComp.razor(51)   : LineItems.Count/Price,  Shipping and Handling/0, Estimated Tax/0, 
                                        Order Total/TotalPrice

-> IDeleteProductUseCase, DeleteProductUseCase(54)
-> IUpdateQuantityUseCase, UpdateQuantityUseCase(54)

-> LineItemComp.razor(55) -> add DeleteProductUseCase, IUpdateQuantityUseCase to the component 

------------------------------

-> IStateStore.cs(52)
    void AddStateChangeListeners(Action listener)
    void RemoveStateChangeListeners(Action listener)
    void BroadCastStateChange(Action listener)

-> IShoppingCartStateStore.cs
-> ShoppingCartStateStore.cs
    Task<int> GetItemsCount();
    void UpdateLineItemsCount();
    void UpdateProductQuantity();

-> AddProductToCardUseCases.cs (add IShoppingCartStateStore)
-> DeleteProductUseCase.cs (add IShoppingCartStateStore)

-> CardComp.razor(53)

----------------------------------------

-> IOrderRepository.cs (56)
-> OrderRepository.cs : CreateOrder(), GetOrder(), GetOrderByUniqueId(), GetOrders()
                        GetOutstandingsOrders(), GetProcessedOrders(), UpdateOrder()

-> PlaceOrderUseCase.cs(57)
-> IPlaceOrderUseCase.cs : 
   -> Execute()
   -> ctor(IOrderService, IOrderRepository, IShoppingCart, IShoppingCartStateStore)

-> PlaceOrderComp.razor(60)
-> CustomerViewModel.cs
-> CustomerFormComp.razor

-> ViewOrderConfirmationUseCase.cs (61)
-> IViewOrderConfirmationUseCase.cs
-> OrderConfirmationComp.razor 


------ 6.Build Admin Portal ------ 

-> ViewOutstandingOrdersUseCase (62)
-> IViewOutstandingOrdersUseCase

-> ViewOrderDetailUseCase(3:44)     : GetOrderAsync(int orderId)
-> IViewOrderDetailUseCase

-> ProcessOrderUseCase(5:10)        :
-> IProcessOrderUseCase

-> ViewProcessedOrdersUseCase.cs  (8:30)
-> IViewProcessedOrdersUseCase.cs


-> OutStandingOrdersComp.razor(63)
-> OrderListComp.razor
-> OrderItemComp.razor

-> OrderDetailComp.razor
-> ProcessedOrderComp.razor

-> services.AddControllers()(62)
-> services.AddAuthentication(...)
           .AddCookie(...)

-> app.UseAuthentication();
-> app.UseAuthorization();
-> endpoints.MapControllers();


-> AuthenticationController.cs
    Login()
    LogOut()

-> Login.razor(63)
-> Logout.razor(64)



