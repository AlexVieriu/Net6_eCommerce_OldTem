@page "/orderconfirm/{uniqueId}"

@inject IViewOrderConfirmationUseCase viewOrderConfirmationUseCase

@attribute [Authorize]

<h3>Order Confirmation</h3>
<br />

@if (order != null)
{
    <div class="row">
        <div class="col-6">
            <p>
                <b>Shipping Info:</b>
            </p>
            <p>@order.CustomerName</p>
            <p>@order.CustomerAddress</p>
            <p>@order.CustomerCity</p>
            <p>@order.CustomerStateProvince</p>
            <p>@order.CustomerCountry</p>
        </div>

        <div class="col-6">
            <OrderSummaryComp Order="order" HidePlaceOrder="true" />
        </div>
    </div>

    <br />
    <table class="table">
        <thead class="thead-dark">
            <tr>
                <th>Product Name</th>
                <th>Quantity</th>
                <th>Price</th>
            </tr>
        </thead>
        <tbody class="thead-light">
            @foreach (var item in order.LineItems)
            {
                <tr>
                    <td>@item.Product.Name</td>
                    <td>@item.Quantity</td>
                    <td>@item.Product.Price</td>
                </tr>
            }
        </tbody>
    </table>
}

@code{
    private Order order;

    [Parameter]
    public string UniqueId { get; set; }

    // Dapper
    protected override void OnParametersSet()
    {

        if (!string.IsNullOrWhiteSpace(UniqueId))
        {
            order = viewOrderConfirmationUseCase.Execute(UniqueId); // GetOrderByUniqueId() -> return order
        }
    }


    //// Local Storage
    //protected override void OnAfterRender(bool firstRender)
    //{
    //    if (firstRender)
    //    {
    //        if(!string.IsNullOrWhiteSpace(UniqueId))
    //            order = viewOrderConfirmationUseCase.Execute(UniqueId); // GetOrderByUniqueId() -> return order
    //    }
    //}
} 